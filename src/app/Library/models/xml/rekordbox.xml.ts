import { XMLFile, XMLNode } from './xml';

export interface RekordboxXMLLibrary extends XMLFile {
  elements: [DJ];
}
export function isRekordboxLibrary(object: any): object is RekordboxXMLLibrary {
  return object.elements[0].name === 'DJ_PLAYLISTS';
}

/* ROOT NODES */
export interface DJ extends XMLNode {
  name: 'DJ_PLAYLISTS';
  attributes?: {
    Version: string; //number converted to string
  };
  elements?: [Product, Collection, Playlists];
}

export interface Product extends XMLNode {
  name: 'PRODUCT';
  attributes?: {
    Company: 'AlphaTheta';
    Name: 'rekordbox';
    version: string;
  };
}

export interface Collection extends XMLNode {
  name: 'COLLECTION';
  attributes?: {
    Entries: string; //number converted to string
  };
  elements?: Track[];
}
export function isCollection(object: any): object is Collection {
  return object.name === 'COLLECTION';
}

export interface Playlists extends XMLNode {
  name: 'PLAYLISTS';
  elements?: Node[];
}
export function isPlaylists(object: any): object is Playlists {
  return object.name === 'COLLECTION';
}

/* TRACK NODE */
export interface Track extends XMLNode {
  name: 'TRACK';
  attributes?: {
    TrackID?: string;
    Name?: string; //Title
    Artist?: string;
    Composer?: string; //Remixer?
    Album?: string;
    Grouping?: string; //Color
    Genre?: string;
    Kind?: string; //Audio type file
    Size?: string;
    TotalTime?: string;
    DiscNumber?: string;
    TrackNumber?: string;
    Year?: string;
    AverageBPM?: string;
    DateAdded?: string;
    BitRate?: string;
    SampleRate?: string;
    Comments?: string;
    PlayCount?: string;
    Rating?: string;
    Location?: string;
    Remixer?: string;
    Tonality?: string;
    Label?: string;
    Mix?: string;
    Colour?: string; //Color HEX
  };
  elements?: (GridMarker | PositionMark)[];
}
export function isTrack(object: any): object is Track {
  return object.name === 'ENTRY';
}

export interface GridMarker extends XMLNode {
  name: 'TEMPO';
  attributes?: {
    BPM?: string;
    BPM_QUALITY?: string;
  };
}
export function isGridMarker(object: any): object is GridMarker {
  return object.name === 'TEMPO';
}

export interface PositionMark extends XMLNode {
  name: 'POSITION_MARK';
  attributes?: {
    Name?: string; //AutoGrid / Beat Marker --> Grid (name autogenerated)
    Type?: string; //0: Hotcue, 1: Fade In, 2: Fade-Out, 3: Load, 4: Grid, 5: Loop
    Start?: string; //cue position (in ms?)
    End?: string; //Only for loops
    Num?: string; //-1: memory cue, 0-7: hotcue 1-8
    Red?: string; //0-255
    Green?: string; //0-255
    Blue?: string; //0-255
  };
}
export function isCue(object: any): object is PositionMark {
  return object.name === 'POSITION_MARK';
}

/* PLAYLISTS NODE */
export interface Node extends XMLNode {
  name: 'NODE';
  attributes?: {
    Type: string;
    Name: string;
  };
  elements?: (Folder | Playlist)[];
}
export interface Folder extends XMLNode {
  name: 'NODE';
  attributes?: {
    Type: '0';
    Name: string;
    Count: string; //Folders + playlists inside its folder
  };
  elements?: Node[];
}
export function isFolder(object: any): object is Node {
  return object.attributes.Type === '0';
}

export interface Playlist extends XMLNode {
  name: 'NODE';
  attributes?: {
    Name: string;
    Type: '1';
    KeyType: string; //always 0?
    Entries: string;
  };
  elements?: Entry[];
}
export function isPlaylist(object: any): object is Playlist {
  return object.attributes.Type === '1';
}
export interface Entry extends XMLNode {
  name: 'TRACK';
  attributes?: {
    Key: string; //TrackID
  };
}
